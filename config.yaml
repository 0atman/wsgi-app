options:
    build_label:
        default: ""
        type: string
        description: >
            The build label given to the code archive and corresponding to
            the path from which the archived code should be installed.
            For example, a value of 'r2' tells the charm to use
            the archive at 'r2/code_archive.tgz'.
    archive_filename:
        default: ""
        type: string
        description: >
            The filename for the archive - e.g. "code_archive.tgz"
    code_assets_uri:
        default: ""
        type: string
        description: >
            An optional URI to download the archive from
            This shouldn't be the whole URI but the earlier part
            (e.g.: 'https://example.com/AUTH/container') for this format:
            {{ code_assets_uri }}/{{ build_label }}/{{ archive_filename }}
            NB: The URI should *not* include a trailing slash
    wsgi_application:
        default: ''
        type: string
        description: >
            The WSGI application within the archive, in Python notation
            E.g.: my_app.wsgi:application
    current_symlink:
        default: "latest"
        type: string
        description: |
            The symlink of the code to run. The default of 'latest' will use
            the most recently added build on the instance.  Specifying a
            differnt label (eg. "r235") will symlink to that directory assuming
            it has been previously added to the instance.
    requirements_path:
        default: ''
        type: string
        description: >
            The location of the requirements file within the archive.
            Requirements in this file will be installed with `pip install`
    pip_cache_path:
        default: ''
        type: string
        description: >
            The location of the pip-cache to install requirements from.
            If pip-cache is present, pip will not attempt to connect to PyPi,
            and instead look for requirements in the specified cache folder.
    apt_dependencies:
        default: ''
        type: string
        description: A space-separated list of apt dependencies to install
    nagios_index_content:
        default: ""
        type: string
    relation_config_dir:
        default: "conf"
        type: string
        description: >
            The location of the directory within the project directory
            for relation settings files to be placed.
            When the charm creates relations, it will store settings files
            with configuration information about the relation
            at: <settings_dir>/<relation_name>.py.
    update_make_target:
        default: ""
        type: string
        description: >
            After the code is extracted, the charm will run:
            $ make <update_make_target>
            in the project directory. You can define this make target
            in your project to run any commands necessary to update your app
